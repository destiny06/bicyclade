package bicyclade;

message Container {
  optional PlayerAction player_action;
  optional ServerAction server_action;
  optional SpectatorAction spectator_action;
}

message Game {
  optional uint32 id;
  repeated Player players;
  repeated Card cards;
  repeated Offering offerings;
  repeated GodType gods;
  repeated Isle isles;
}

message Player {
  optional string name;
  required Colour colour;
  optional uint32 coins;
  optional uint32 philosophers;
  optional uint32 priests;
  repeated Troop troops;
  repeated Fleet fleets;
}

message Card {
  optional uint32 spot;
  optional Creature creature;
}

enum Creature {
  CYCLOPS
  KRAKEN
}

message Offering {
  optional Colour colour;
  optional uint32 id;
  optional GodType god;
  optional uint32 bid;
  optional uint32 order;
}

message Isle {
  optional Colour colour;
  repeated Spot spots;
  repeated ProsperityMarker prosperity_markers;
  repeated BuildSpace build_spaces;
}

message ProsperityMarker {
  optional uint32 id;
  optional Spot spot;
}

message BuildSpace {
  repeated Spot spots,
  repeated NormalBuilding normal_buildings;
  optional Metropoly metropoly;
}

message NormalBuilding {
  repeated Spot spots,
  optional uint32 id;
  optional BuildingType type;
}

enum BuildingType {
  FORTRESS;
  PORT;
  TEMPLE;
  UNIVERSITY;
}

message Metropoly {
  repeated Spot spots,
  optional uint32 id;
}

message PlayerAction {
  required Colour colour = 0;
  required ClientActionType type = 1;
  optional GodType god = 2;
  optional uint32 offering = 3;
  optional uint32 card_spot = 4;
  repeated Spot spots = 5 [packed=true];
  repeated FleetMove fleet_moves = 6 [packed=true];
  repeated TroopMove troop_moves = 6 [packed=true];
}

enum Colour {
  BLACK;
  BLUE;
  PURPLE;
  RED;
  YELLOW;
}

enum ClientActionType {
  BUILD = 0;
  CALL_CARD = 1;
  CHANGE_CARD = 2;
  MOVE_FLEETS = 3;
  MOVE_TROOPS = 4;
  PUT_OFFERING_MARKER = 5;
  PUT_PROSPERITY_MARKER = 6;
  RECRUIT = 7;
}

enum GodType {
  APOLLO = 0;
  ARES = 1;
  ATHENA = 2;
  POSEIDON = 3;
  ZEUS = 4;
}

message Spot {
  required uint32 x = 1;
  required uint32 y = 2;
}

message FleetMove {
  repeated Fleet fleets;
  optional Spot start;
  optional Spot end;
}

message Fleet {
  optional Colour colour;
  required uint32 id;
  optional Spot spot;
}

message TroopMove {
  repeated Troop troops;
  optional Spot start;
  optional Spot end;
}

message Troop {
  optional Colour colour;
  required uint32 id;
  optional Spot spot;
}

message SpectatorAction {
  optional uint32 spectator_id;
  optional SpectatorActionType type;
  optional uint32 game_id;
}

enum SpectatorActionType {
  CREATE_GAME
  JOIN_GAME
  QUIT_GAME
}

message ServerAction {
  optional ServerActionType type;
  optional Colour colour;
  optional Game game;
}

enum ServerActionType {
  ACK_CREATE_GAME;
  ADD_SPECTATOR;
  REMOVE_SPECTATOR;
  ADD_PLAYER;
  REMOVE_PLAYER;
  START_GAME;
}
